translate_list = {
   # codding design
        "- API Create/ update thì validate maxlength = maxlength database": "APIのCreate/Updateではmaxlength = DBのmaxlengthをバリデーションする",
        "- API Search thì không cần validate nếu đây là tham số trong điều kiện search": "APIのSearchでは検索条件のパラメータであればバリデーション不要",
        "- Validate Start Date < EndDate": "Start Date < EndDateのバリデーション",
        "- Validate String nhập vào theo kiểu dữ liệu date format.": "日付形式のデータ型に従って入力文字列をバリデーションする",
        "- Validate bắt buộc nhập 1 trường nếu trường còn lại bằng giá trị": "ある項目が指定された値の場合、他の1項目の入力が必須となるバリデーション",
        "- Validate bắt buộc nhập giá trị": "値の入力必須バリデーション",
        "- Validate giá trị chỉ bao gồm số half size": "値は半角数字のみを含むバリデーション",
        "- Validate giá trị nhập là timstamps format": "入力値がタイムスタンプ形式であることをバリデーション",
        "- Validate giá trị nhập phải thuộc danh sách Enum được khai báo": "入力値が定義済みのEnumリストに含まれることをバリデーション",
        "- Validate kiểu số Integer để khi convert bằng mapper không bị lỗi.": "マッパーで変換時にエラーとならないよう、整数型をバリデーションする",
        "- Validate list email": "メールアドレスのリストをバリデーションする",
        "- Validate mã bưu điện": "郵便番号をバリデーションする",
        "I) Mục đích/ Ý nghĩa:": "I）目的／意味：",
        "II) Các step:": "II）ステップ：",
        "STT": "No",
        "1) Convert Từ Request thành Form": "1) リクエストからフォームに変換する",
        "- Validate nhóm các trường phải có ít nhất 1 trường có giá trị là": "フィールドグループ内で少なくとも1つのフィールドに値が存在することをバリデーション",
        "- Validate số From < số To": "数値From < 数値Toのバリデーション",
        "- Validate số điện thoại hoặc số Fax": "電話番号またはFax番号のバリデーション",
        "- Validate định dạng email": "メール形式のバリデーション",
        "1) Các thành phần cơ bản của chức năng": "1）機能の基本構成要素",
        "1) Try {} catch và set stateException": "1）Try {} catchでstateExceptionを設定する",
        "2) Các function dùng chung": "2）共通関数",
        "2) Khai báo protobuf": "2）protobufの定義",
        "2) Log Begin method + end method.": "2）メソッドの開始と終了のログ出力",
        "3) Các Enum, Constants …": "3）Enum、定数など",
        "4) Các QA liên quan": "4）関連するQA",
        "5) Các Bugs liên quan": "5）関連するバグ",
        "6) Các action cần insert thêm vào access Log": "6）accessログに追加すべきアクション",
        "6) Xác thực mật khẩu\n - Trường hợp mật khẩu đúng, đi tiếp bước 4\n - Trường hợp sai mật khẩu, update login_attempt + 1, nếu login_attempt >= 5, update unlock_at = thời gian hiện tại + 15p": "6）パスワード認証\n - パスワードが正しければステップ4へ進む\n - 間違っていればlogin_attemptを+1。login_attempt >= 5の場合、unlock_atを現在時刻＋15分に更新",
        "7) Kiểm tra ngày hết hạn mật khẩu\n7.1 Nếu ngày hết hạn mật khẩu nhỏ hơn ngày hiện tại thì trả về lỗi. Response sẽ có state vả message dạng\n     + Ghi log warning:パスワードの有効期限が切れています。\n     + Trả về response có status(trong state) là 901\n7.2.Nếu ngày hết hạn mật khẩu lớn hơn ngày hiện tại thì xử lý tiếp mục 8": "7）パスワード有効期限の確認\n7.1 有効期限が現在日時より過ぎている場合、エラーを返す。レスポンスには以下を含む：\n     + ログ警告: パスワードの有効期限が切れています。\n     + stateにstatus 901を返す\n7.2 有効期限が現在日時より後であれば、ステップ8へ進む",
        "8) Update lại các column trong table creator\n - update_at, last_login_at, unlock_at: update về ngày hiện tại\n - login_attempt về 0\n - login_token = loginToken từ UUID": "8）creatorテーブルのカラムを更新\n - update_at、last_login_at、unlock_atを現在日時に更新\n - login_attemptを0にリセット\n - login_tokenにUUIDからのloginTokenを設定",
        "9) Tạo response trả về": "9）レスポンスを生成して返す",
        "Boolean": "ブール型",
        "Bảng lưu thông tin mã auth code khi login của creator": "creatorのログイン時の認証コード情報を保持するテーブル",
        "Bảng lưu thông tin đăng nhập của creator": "creatorのログイン情報を保持するテーブル",
        "Bắt buộc": "require",
        "Chú ý": "注意",
        "Chỉ cần mô tả các nested class": "ネストされたクラスのみ記述すればよい",
        "Cấu trúc Form": "フォーム構造",
        "Danh sách các trường áp dụng": "適用されるフィールドの一覧",
        "II) Các step:\n1) Convert Từ Request thành Form\n2) Validate request\n    Nếu có lỗi xảy ra thì trả về status 040\n3) Check xem creatorId có tồn tại trong table creator hay không, nểu có thì đi tiếp bước 4, nếu không thì trả về status 011.\n4) Check xem trong table creator_onetime_auth đã tồn tại data có creatorId và token tương ứng hay chưa, nếu có thì xóa đi.\n4) Gen ra random code gồm 6 chữ số\n5) Tạo 1 record mới trong table creator_onetime_auth\n6) Thực hiện gửi SMS cho người dùng\n7) Tạo response trả về": "II）ステップ：\n1）リクエストをFormに変換\n2）リクエストをバリデーション（エラーがあればstatus 040を返す）\n3）creatorIdがcreatorテーブルに存在するか確認（存在すればステップ4へ、なければstatus 011を返す）\n4）creator_onetime_authテーブルにcreatorIdとtokenのデータがあれば削除\n4）6桁のランダムコードを生成\n5）creator_onetime_authに新しいレコードを作成\n6）SMSをユーザーに送信\n7）レスポンスを返す",
        "II) Câu sql:": "II）SQL文：",
        "Kiểu trả về": "返却型",
        "Loại": "種別",
        "Loại validate": "バリデーションタイプ",
        "Message lỗi": "エラーメッセージ",
        "Method Name": "メソッド名",
        "Mô tả": "説明",
        "Mô tả Method xử lý chính": "主処理メソッドの説明",
        "Mô tả validate": "バリデーションの説明",
        "Name": "名前",
        "Params": "パラメータ",
        "Proto Name": "Proto名",
        "QA về message": "メッセージに関するQA",
        "Review Comment": "レビューコメント",
        "SQL Sử dụng": "使用するSQL",
        "Table name": "テーブル名",
        "Trạng thái": "状態",
        "Tên chức năng:": "機能名：",
        "Chức năng đăng ký nên ai cũng có thể truy cập": "登録機能のため、誰にもアクセスできる",
        "Validate request": "リクエストのバリデーション",
        "2) Validate request": "2) リクエストのバリデーション",
        "Nếu có lỗi xảy ra thì trả về status 040": "　エラーがある場合、404のステータスを返す",
        "Validate theo regexp": "正規表現によるバリデーション",
        "Ví dụ": "例",
        "- Validate số điện thoại": "電話番号のバリデーション",
        "Viết 1 class MobileNumberValidator để validate định dạng số điện thoại": "MobileNumberValidatorクラスを作成し、電話番号形式のバリデーションを行う",
        "Sử dụng class EmailValidator để validate những điều kiện sau": "EmailValidator クラスを使用して、以下の条件をバリデーションする：",
        "Nhập số điện thoại và gửi sms cho người dùng": "電話番号を入力して、ユーザーにSMSで送信する",
        "1)có bao gồm ký hiệu @ hay không": "1）「@」記号が含まれているかどうか",
        "2)ký tự @ có đang ở đầu hay ở cuối hay không": "2）「@」記号が先頭または末尾にないかどうか",
        "3)maxlength 253ký tự": "3）最大長が253文字以内であること",
        "2) Xử lý": "２）対応",
        "- Tồn tại trong dữ liệu bảng master": "マスターテーブルにデータが既に存在しています",
        "Sử dụng class annotation để convert chữ số fullsize thành halfsize": "annotationクラスを利用して全角数字を半角数字に変換する",
        "2) Tạo response trả về :": "2) レスポンスの返却を作成：",
        "Đây là hàm có sẵn KH cung cấp": "これは顧客から提供された既存関数です",
        "Đăng nhập": "ログイン",
        "đã update vào coding design": "coding_designに反映済み",
        "- Validate bắt buộc nhập giá trị nếu thỏa mã điều kiện": "条件を満たす場合は、必須入力のバリデーションを行う",
        "- Convert full-width to half-width": "全角を半角に変換する",
        "- dữ liệu Tồn tại trong bảng master": "マスターテーブルにデータが存在することを確認する",
        "Viết 1 class HalfsizeNumberValidator để validate xem giá trị truyền vào có phải chứa toàn kí tự số halfsize hay không": "HalfsizeNumberValidatorクラスを作成し、 渡された値が全て半角数字かをバリデーションする",
}